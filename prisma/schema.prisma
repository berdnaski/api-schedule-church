generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                @id @default(uuid())
  name          String
  email         String                @unique
  password_hash String
  role          Role                  @default(MEMBER)
  departments   Department[]          @relation("UserDepartments")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  schedules     ScheduleParticipant[] @relation("UserSchedules")
  LeaderRequest LeaderRequest[]
  Department    Department[]

  @@map("users")
}

enum Role {
  ADMIN
  MEMBER
  LEADER
}

model Department {
  id          String     @id @default(uuid())
  name        String
  description String
  schedules   Schedule[]
  users       User[]     @relation("UserDepartments")
  userId      String
  user        User       @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

model Schedule {
  id           String                @id @default(uuid())
  departmentId String
  name         String
  date         DateTime
  time         String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  department   Department            @relation(fields: [departmentId], references: [id])
  participants ScheduleParticipant[] @relation("ScheduleParticipants")

  @@map("schedules")
}

model ScheduleParticipant {
  id         String   @id @default(uuid())
  scheduleId String
  userId     String
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], name: "UserSchedules")
  schedule   Schedule @relation(fields: [scheduleId], references: [id], name: "ScheduleParticipants")

  @@unique([scheduleId, userId])
  @@map("schedule_participants")
}

enum Status {
  ACCEPTED
  REJECTED
  PENDING
}

model Song {
  id        String        @id @default(uuid())
  title     String
  artist    String
  genre     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  versions  SongVersion[]

  @@map("songs")
}

model SongVersion {
  id             String   @id @default(uuid())
  version_name   String
  songId         String
  classification String
  key            String
  link_chord     String
  link_video     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  song           Song     @relation(fields: [songId], references: [id])

  @@map("song_version")
}

model LeaderRequest {
  id        String              @id @default(uuid())
  name      String
  userId    String
  status    LeaderRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("leader_request")
}

enum LeaderRequestStatus {
  ACCEPTED
  REJECTED
  PENDING
}
